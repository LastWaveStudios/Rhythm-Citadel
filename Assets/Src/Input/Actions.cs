//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameInput
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Actions.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @Actions: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @Actions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""Towers"",
            ""id"": ""707c7d1a-898a-4c5d-8825-ea626f23c67d"",
            ""actions"": [
                {
                    ""name"": ""Group 1"",
                    ""type"": ""Button"",
                    ""id"": ""d2dce09a-94d6-4664-b0f1-0b1b7871e443"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Group 2"",
                    ""type"": ""Button"",
                    ""id"": ""20b9ba49-8e83-4e9a-8204-b559c76e2d5d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Group 3"",
                    ""type"": ""Button"",
                    ""id"": ""62b76ef4-33c7-4d59-aa50-01a67dd7458b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Group 4"",
                    ""type"": ""Button"",
                    ""id"": ""41c6ad32-3380-4134-8f22-368925c591fd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Group 5"",
                    ""type"": ""Button"",
                    ""id"": ""fc27d2b1-e21f-45e0-a331-2e656680f460"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Group 6"",
                    ""type"": ""Button"",
                    ""id"": ""fff4fa82-2cd5-43e6-bc3c-87de128f3b58"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed79652b-1d0c-4923-ad91-3b4c9fa3e08d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Group 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fbb505b-aff5-4c24-9bb2-869a4e571145"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Group 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5b1441c-45ab-4b71-bd24-6627b248045b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Group 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce383305-8f17-4667-a222-40c855de3783"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Group 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f61ba25e-9cb1-45c5-86e5-c4de14e7078f"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Group 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24369764-9ffa-4fb3-8760-901fb108a3bc"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Group 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Towers
            m_Towers = asset.FindActionMap("Towers", throwIfNotFound: true);
            m_Towers_Group1 = m_Towers.FindAction("Group 1", throwIfNotFound: true);
            m_Towers_Group2 = m_Towers.FindAction("Group 2", throwIfNotFound: true);
            m_Towers_Group3 = m_Towers.FindAction("Group 3", throwIfNotFound: true);
            m_Towers_Group4 = m_Towers.FindAction("Group 4", throwIfNotFound: true);
            m_Towers_Group5 = m_Towers.FindAction("Group 5", throwIfNotFound: true);
            m_Towers_Group6 = m_Towers.FindAction("Group 6", throwIfNotFound: true);
        }

        ~@Actions()
        {
            UnityEngine.Debug.Assert(!m_Towers.enabled, "This will cause a leak and performance issues, Actions.Towers.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Towers
        private readonly InputActionMap m_Towers;
        private List<ITowersActions> m_TowersActionsCallbackInterfaces = new List<ITowersActions>();
        private readonly InputAction m_Towers_Group1;
        private readonly InputAction m_Towers_Group2;
        private readonly InputAction m_Towers_Group3;
        private readonly InputAction m_Towers_Group4;
        private readonly InputAction m_Towers_Group5;
        private readonly InputAction m_Towers_Group6;
        /// <summary>
        /// Provides access to input actions defined in input action map "Towers".
        /// </summary>
        public struct TowersActions
        {
            private @Actions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public TowersActions(@Actions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Towers/Group1".
            /// </summary>
            public InputAction @Group1 => m_Wrapper.m_Towers_Group1;
            /// <summary>
            /// Provides access to the underlying input action "Towers/Group2".
            /// </summary>
            public InputAction @Group2 => m_Wrapper.m_Towers_Group2;
            /// <summary>
            /// Provides access to the underlying input action "Towers/Group3".
            /// </summary>
            public InputAction @Group3 => m_Wrapper.m_Towers_Group3;
            /// <summary>
            /// Provides access to the underlying input action "Towers/Group4".
            /// </summary>
            public InputAction @Group4 => m_Wrapper.m_Towers_Group4;
            /// <summary>
            /// Provides access to the underlying input action "Towers/Group5".
            /// </summary>
            public InputAction @Group5 => m_Wrapper.m_Towers_Group5;
            /// <summary>
            /// Provides access to the underlying input action "Towers/Group6".
            /// </summary>
            public InputAction @Group6 => m_Wrapper.m_Towers_Group6;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Towers; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="TowersActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(TowersActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="TowersActions" />
            public void AddCallbacks(ITowersActions instance)
            {
                if (instance == null || m_Wrapper.m_TowersActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TowersActionsCallbackInterfaces.Add(instance);
                @Group1.started += instance.OnGroup1;
                @Group1.performed += instance.OnGroup1;
                @Group1.canceled += instance.OnGroup1;
                @Group2.started += instance.OnGroup2;
                @Group2.performed += instance.OnGroup2;
                @Group2.canceled += instance.OnGroup2;
                @Group3.started += instance.OnGroup3;
                @Group3.performed += instance.OnGroup3;
                @Group3.canceled += instance.OnGroup3;
                @Group4.started += instance.OnGroup4;
                @Group4.performed += instance.OnGroup4;
                @Group4.canceled += instance.OnGroup4;
                @Group5.started += instance.OnGroup5;
                @Group5.performed += instance.OnGroup5;
                @Group5.canceled += instance.OnGroup5;
                @Group6.started += instance.OnGroup6;
                @Group6.performed += instance.OnGroup6;
                @Group6.canceled += instance.OnGroup6;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="TowersActions" />
            private void UnregisterCallbacks(ITowersActions instance)
            {
                @Group1.started -= instance.OnGroup1;
                @Group1.performed -= instance.OnGroup1;
                @Group1.canceled -= instance.OnGroup1;
                @Group2.started -= instance.OnGroup2;
                @Group2.performed -= instance.OnGroup2;
                @Group2.canceled -= instance.OnGroup2;
                @Group3.started -= instance.OnGroup3;
                @Group3.performed -= instance.OnGroup3;
                @Group3.canceled -= instance.OnGroup3;
                @Group4.started -= instance.OnGroup4;
                @Group4.performed -= instance.OnGroup4;
                @Group4.canceled -= instance.OnGroup4;
                @Group5.started -= instance.OnGroup5;
                @Group5.performed -= instance.OnGroup5;
                @Group5.canceled -= instance.OnGroup5;
                @Group6.started -= instance.OnGroup6;
                @Group6.performed -= instance.OnGroup6;
                @Group6.canceled -= instance.OnGroup6;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TowersActions.UnregisterCallbacks(ITowersActions)" />.
            /// </summary>
            /// <seealso cref="TowersActions.UnregisterCallbacks(ITowersActions)" />
            public void RemoveCallbacks(ITowersActions instance)
            {
                if (m_Wrapper.m_TowersActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="TowersActions.AddCallbacks(ITowersActions)" />
            /// <seealso cref="TowersActions.RemoveCallbacks(ITowersActions)" />
            /// <seealso cref="TowersActions.UnregisterCallbacks(ITowersActions)" />
            public void SetCallbacks(ITowersActions instance)
            {
                foreach (var item in m_Wrapper.m_TowersActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TowersActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="TowersActions" /> instance referencing this action map.
        /// </summary>
        public TowersActions @Towers => new TowersActions(this);
        private int m_KeyboardSchemeIndex = -1;
        /// <summary>
        /// Provides access to the input control scheme.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Towers" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="TowersActions.AddCallbacks(ITowersActions)" />
        /// <seealso cref="TowersActions.RemoveCallbacks(ITowersActions)" />
        public interface ITowersActions
        {
            /// <summary>
            /// Method invoked when associated input action "Group 1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnGroup1(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Group 2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnGroup2(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Group 3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnGroup3(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Group 4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnGroup4(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Group 5" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnGroup5(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Group 6" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnGroup6(InputAction.CallbackContext context);
        }
    }
}
